# Software License Agreement (BSD License)
#
# Copyright (c) 2013, Eric Perko
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the names of the authors nor the names of their
#    affiliated organizations may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import math
import string

from libnmea_navsat_driver.checksum_utils import check_nmea_checksum
import libnmea_navsat_driver.parser


class RosNMEADriver(object):
    def __init__(self):
	self.current_pos = None

    # Returns True if we successfully did something with the passed in
    # nmea_string
    def add_sentence(self, nmea_string, frame_id, timestamp=None):
        #if not check_nmea_checksum(nmea_string):
           # print("Received a sentence with an invalid checksum. " +
           #               "Sentence was: %s" % repr(nmea_string))
         #   return False
    	#if not re.match('^\$TXXX.*$', nmea_string):
        #	logger.debug("Regex didn't match, sentence not valid NMEA? Sentence was: %s"
         #            % repr(nmea_string))
       	#	return False

        #parsed_sentence = libnmea_navsat_driver.parser.parse_nmea_sentence(nmea_string)
	parsed_sentence = nmea_string
        if not parsed_sentence:
         #   print("Failed to parse NMEA sentence. Sentece was: %s" % nmea_string)
            return False



	current_fix = {"status":0,"latitude":0,"longitude":0,"altitude":0,"utc_time":0,"ac_id":"24"}
	tempx1= ord(parsed_sentence[20])
	tempx2= parsed_sentence[19]

        if  "$TXXX" == str(parsed_sentence[0:5]):
	    utc_time_str = str(ord(parsed_sentence[19]-"0")*10+ord(parsed_sentence[20]-"0")+8)+":"
	    utc_time_str += str(parsed_sentence[21:23])+":"
	    utc_time_str += str(parsed_sentence[23:28])+":"
	    current_fix["utc_time"] = utc_time_str

	    latitude_str = str(parsed_sentence[28:39])    
	    current_fix["latitude"] = str(libnmea_navsat_driver.parser.convert_latitude(latitude_str))

	    longitude_str = str(parsed_sentence[40:52])    
	    current_fix["longitude"] = str(libnmea_navsat_driver.parser.convert_longitude(longitude_str))
	    print("Received a sentence GGA is ok " +
                          "lat and lon is: %s" % repr(current_fix))
	    current_fix["ac_id"] = str(24)
           # return current_fix
	    self.current_pos = current_fix
	    return True

        else:
            return False

    """Helper method for getting the frame_id with the correct TF prefix"""

    @staticmethod
    def get_frame_id():
        frame_id = rospy.get_param('~frame_id', 'gps')
        if frame_id[0] != "/":
            """Add the TF prefix"""
            prefix = ""
            prefix_param = rospy.search_param('tf_prefix')
            if prefix_param:
                prefix = rospy.get_param(prefix_param)
                if prefix[0] != "/":
                    prefix = "/%s" % prefix
            return "%s/%s" % (prefix, frame_id)
        else:
            return frame_id
